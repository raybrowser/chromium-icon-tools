{"mappings":"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","sources":["src/libs/icon2svg/index.js","node_modules/svg-parser/src/index.js","node_modules/svg-parser/node_modules/locate-character/dist/locate-character.es.js","node_modules/color-name/index.js","node_modules/color-parse/index.js","node_modules/color-rgba/index.js","src/libs/svg2icon/index.ts","src/app/index.ts"],"sourcesContent":["const SVG_NS = 'http://www.w3.org/2000/svg';\r\n\r\nfunction notimplemented(msg) {\r\n  console.log('notimplemented(vector-icon): ' + msg);\r\n}\r\n\r\nclass VectorIcon {\r\n  constructor(commands, delegate) {\r\n    this.commands_ = commands;\r\n    this.delegate_ = delegate;\r\n    this.svg_ = null;\r\n    this.paths_ = [];\r\n    this.currentPath_ = null;\r\n    this.pathD_ = [];\r\n    this.clipRect_ = null;\r\n  }\r\n\r\n  paint() {\r\n    var ncmds = this.commands_.length;\r\n    this.svg_ = document.createElementNS(SVG_NS, 'svg');\r\n    this.svg_.setAttribute('width', '48');\r\n    this.svg_.setAttribute('height', '48');\r\n    this.svg_.setAttribute('fill-rule', 'evenodd');\r\n    this.svg_.classList.add('vector-svg');\r\n    this.currentPath_ = this.createPath();\r\n    for (var i = 0; i < ncmds; ++i) {\r\n      if (this.commands_[i][0] == 'END') break;\r\n      this.processCommand(this.commands_[i]);\r\n    }\r\n    if (this.pathD_.length > 0) this.currentPath_.setAttribute('d', this.pathD_.join(' '));\r\n\r\n    // Just set the clip-path on all paths, I guess?\r\n    if (this.clipRect_) {\r\n      var clipPath = document.createElementNS(SVG_NS, 'clipPath');\r\n      clipPath.setAttribute('id', 'clip-path');\r\n      this.svg_.appendChild(clipPath);\r\n\r\n      var rect = document.createElementNS(SVG_NS, 'rect');\r\n      rect.setAttribute('x', this.clipRect_[0]);\r\n      rect.setAttribute('y', this.clipRect_[1]);\r\n      rect.setAttribute('width', this.clipRect_[2]);\r\n      rect.setAttribute('height', this.clipRect_[3]);\r\n      clipPath.appendChild(rect);\r\n\r\n      this.paths_.forEach((path) => path.setAttribute('clip-path', 'url(#clip-path)'));\r\n    }\r\n\r\n    // Add all the paths.\r\n    var svg = this.svg_;\r\n    this.paths_.forEach((path) => svg.appendChild(path));\r\n    return this.svg_;\r\n  }\r\n\r\n  closeCurrentPath() {\r\n    if (this.currentPath_) {\r\n      this.currentPath_.setAttribute('d', this.pathD_.join(' '));\r\n      this.pathD_ = [];\r\n      this.currentPath_ = null;\r\n    }\r\n  }\r\n\r\n  createPath() {\r\n    this.closeCurrentPath();\r\n    var path = document.createElementNS(SVG_NS, 'path');\r\n    path.setAttribute('fill', 'gray');\r\n    path.setAttribute('stroke', 'gray');\r\n    path.setAttribute('stroke-width', '0px');\r\n    path.setAttribute('stroke-linecap', 'round');\r\n    path.setAttribute('shape-rendering', 'geometricPrecision');\r\n    this.paths_.push(path);\r\n    return path;\r\n  }\r\n\r\n  createCircle(params) {\r\n    var cx = parseFloat(params[0]);\r\n    var cy = parseFloat(params[1]);\r\n    var r = parseFloat(params[2]);\r\n    var cmds = [\r\n      ['M', cx, cy],\r\n      ['m', -r, '0'],\r\n      ['a', r, r, 0, 1, 0, r * 2, 0],\r\n      ['a', r, r, 0, 1, 0, -r * 2, 0],\r\n    ];\r\n    cmds.forEach((cmd) => this.pathD_.push(cmd.join(' ')));\r\n  }\r\n\r\n  createRoundRect(params) {\r\n    var x = parseFloat(params[0]);\r\n    var y = parseFloat(params[1]);\r\n    var width = parseFloat(params[2]);\r\n    var height = parseFloat(params[3]);\r\n    var rx = parseFloat(params[4]);\r\n    // We can probably not add the arcs if rx == 0?\r\n    var cmds = [\r\n      ['M', x + rx, y],\r\n      ['h', width - rx - rx],\r\n      ['a', rx, rx, 0, 0, 1, rx, rx],\r\n      ['v', height - rx - rx],\r\n      ['a', rx, rx, 0, 0, 1, -rx, rx],\r\n      ['h', -(width - rx - rx)],\r\n      ['a', rx, rx, 0, 0, 1, -rx, -rx],\r\n      ['v', -(height - rx - rx)],\r\n      ['a', rx, rx, 0, 0, 1, rx, -rx],\r\n    ];\r\n    cmds.forEach((cmd) => this.pathD_.push(cmd.join(' ')));\r\n  }\r\n\r\n  processCommand(cmd) {\r\n    if (cmd[0] == 'CANVAS_DIMENSIONS') {\r\n      this.svg_.setAttribute('width', cmd[1]);\r\n      this.svg_.setAttribute('height', cmd[1]);\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == 'NEW_PATH') {\r\n      this.currentPath_ = this.createPath();\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == 'PATH_COLOR_ARGB') {\r\n      var color =\r\n        'rgba(' + [cmd[2], cmd[3], cmd[4], cmd[1]].map((x) => parseInt(x)).join(',') + ')';\r\n      this.currentPath_.style['fill'] = color;\r\n      this.currentPath_.style['stroke'] = color;\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == 'PATH_MODE_CLEAR') {\r\n      // XXX: what do?\r\n      notimplemented(cmd[0]);\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == 'STROKE') {\r\n      this.currentPath_.setAttribute('stroke-width', cmd[1] + 'px');\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == 'CAP_SQUARE') {\r\n      this.currentPath_.style['stroke-linecap'] = 'square';\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == 'DISABLE_AA') {\r\n      this.currentPath_.setAttribute('shape-rendering', 'crispEdges');\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == 'CLIP') {\r\n      this.clipRect_ = cmd.splice(1).map((x) => x.trim() + 'px');\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == 'CIRCLE') {\r\n      this.createCircle(cmd.splice(1));\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == 'ROUND_RECT') {\r\n      this.createRoundRect(cmd.splice(1));\r\n      return;\r\n    }\r\n\r\n    if (cmd[0] == '//') {\r\n      console.log('COMMENT');\r\n      return;\r\n    }\r\n\r\n    var drawCommands = {\r\n      MOVE_TO: 'M',\r\n      R_MOVE_TO: 'm',\r\n      ARC_TO: 'A',\r\n      R_ARC_TO: 'a',\r\n      LINE_TO: 'L',\r\n      R_LINE_TO: 'l',\r\n      H_LINE_TO: 'H',\r\n      R_H_LINE_TO: 'h',\r\n      V_LINE_TO: 'V',\r\n      R_V_LINE_TO: 'v',\r\n      CUBIC_TO: 'C',\r\n      R_CUBIC_TO: 'c',\r\n      CUBIC_TO_SHORTHAND: 'S',\r\n      CLOSE: 'Z',\r\n    };\r\n    if (cmd[0] in drawCommands) {\r\n      var nc = [drawCommands[cmd[0]]].concat(cmd.splice(1).map(parseFloat));\r\n      this.pathD_.push(nc.join(' '));\r\n      return;\r\n    }\r\n\r\n    notimplemented(cmd.join(','));\r\n  }\r\n}\r\n\r\nexport function icon2svg(input) {\r\n  var lines = input.split('\\n').filter((line) => line.length && !line.startsWith('//'));\r\n  var commands = lines.map((line) =>\r\n    line\r\n      .trim()\r\n      .split(',')\r\n      .filter((x) => x.length > 0)\r\n  );\r\n\r\n  var svg = new VectorIcon(commands).paint();\r\n  var svgSource = new XMLSerializer().serializeToString(svg);\r\n\r\n  return svgSource;\r\n}\r\n","import { locate } from 'locate-character';\n\nconst validNameCharacters = /[a-zA-Z0-9:_-]/;\nconst whitespace = /[\\s\\t\\r\\n]/;\nconst quotemark = /['\"]/;\n\nfunction repeat(str, i) {\n\tlet result = '';\n\twhile (i--) result += str;\n\treturn result;\n}\n\nexport function parse(source) {\n\tlet header = '';\n\tlet stack = [];\n\n\tlet state = metadata;\n\tlet currentElement = null;\n\tlet root = null;\n\n\tfunction error(message) {\n\t\tconst { line, column } = locate(source, i);\n\t\tconst before = source.slice(0, i);\n\t\tconst beforeLine = /(^|\\n).*$/.exec(before)[0].replace(/\\t/g, '  ');\n\t\tconst after = source.slice(i);\n\t\tconst afterLine = /.*(\\n|$)/.exec(after)[0];\n\n\t\tconst snippet = `${beforeLine}${afterLine}\\n${repeat(' ', beforeLine.length)}^`;\n\n\t\tthrow new Error(\n\t\t\t`${message} (${line}:${column}). If this is valid SVG, it's probably a bug in svg-parser. Please raise an issue at https://github.com/Rich-Harris/svg-parser/issues – thanks!\\n\\n${snippet}`\n\t\t);\n\t}\n\n\tfunction metadata() {\n\t\twhile ((i < source.length && source[i] !== '<') || !validNameCharacters.test(source[i + 1])) {\n\t\t\theader += source[i++];\n\t\t}\n\n\t\treturn neutral();\n\t}\n\n\tfunction neutral() {\n\t\tlet text = '';\n\t\twhile (i < source.length && source[i] !== '<') text += source[i++];\n\n\t\tif (/\\S/.test(text)) {\n\t\t\tcurrentElement.children.push({ type: 'text', value: text });\n\t\t}\n\n\t\tif (source[i] === '<') {\n\t\t\treturn tag;\n\t\t}\n\n\t\treturn neutral;\n\t}\n\n\tfunction tag() {\n\t\tconst char = source[i];\n\n\t\tif (char === '?') return neutral; // <?xml...\n\n\t\tif (char === '!') {\n\t\t\tif (source.slice(i + 1, i + 3) === '--') return comment;\n\t\t\tif (source.slice(i + 1, i + 8) === '[CDATA[') return cdata;\n\t\t\tif (/doctype/i.test(source.slice(i + 1, i + 8))) return neutral;\n\t\t}\n\n\t\tif (char === '/') return closingTag;\n\n\t\tconst tagName = getName();\n\n\t\tconst element = {\n\t\t\ttype: 'element',\n\t\t\ttagName,\n\t\t\tproperties: {},\n\t\t\tchildren: []\n\t\t};\n\n\t\tif (currentElement) {\n\t\t\tcurrentElement.children.push(element);\n\t\t} else {\n\t\t\troot = element;\n\t\t}\n\n\t\tlet attribute;\n\t\twhile (i < source.length && (attribute = getAttribute())) {\n\t\t\telement.properties[attribute.name] = attribute.value;\n\t\t}\n\n\t\tlet selfClosing = false;\n\n\t\tif (source[i] === '/') {\n\t\t\ti += 1;\n\t\t\tselfClosing = true;\n\t\t}\n\n\t\tif (source[i] !== '>') {\n\t\t\terror('Expected >');\n\t\t}\n\n\t\tif (!selfClosing) {\n\t\t\tcurrentElement = element;\n\t\t\tstack.push(element);\n\t\t}\n\n\t\treturn neutral;\n\t}\n\n\tfunction comment() {\n\t\tconst index = source.indexOf('-->', i);\n\t\tif (!~index) error('expected -->');\n\n\t\ti = index + 2;\n\t\treturn neutral;\n\t}\n\n\tfunction cdata() {\n\t\tconst index = source.indexOf(']]>', i);\n\t\tif (!~index) error('expected ]]>');\n\n\t\tcurrentElement.children.push(source.slice(i + 7, index));\n\n\t\ti = index + 2;\n\t\treturn neutral;\n\t}\n\n\tfunction closingTag() {\n\t\tconst tagName = getName();\n\n\t\tif (!tagName) error('Expected tag name');\n\n\t\tif (tagName !== currentElement.tagName) {\n\t\t\terror(`Expected closing tag </${tagName}> to match opening tag <${currentElement.tagName}>`);\n\t\t}\n\n\t\tallowSpaces();\n\n\t\tif (source[i] !== '>') {\n\t\t\terror('Expected >');\n\t\t}\n\n\t\tstack.pop();\n\t\tcurrentElement = stack[stack.length - 1];\n\n\t\treturn neutral;\n\t}\n\n\tfunction getName() {\n\t\tlet name = '';\n\t\twhile (i < source.length && validNameCharacters.test(source[i])) name += source[i++];\n\n\t\treturn name;\n\t}\n\n\tfunction getAttribute() {\n\t\tif (!whitespace.test(source[i])) return null;\n\t\tallowSpaces();\n\n\t\tconst name = getName();\n\t\tif (!name) return null;\n\n\t\tlet value = true;\n\n\t\tallowSpaces();\n\t\tif (source[i] === '=') {\n\t\t\ti += 1;\n\t\t\tallowSpaces();\n\n\t\t\tvalue = getAttributeValue();\n\t\t\tif (!isNaN(value) && value.trim() !== '') value = +value; // TODO whitelist numeric attributes?\n\t\t}\n\n\t\treturn { name, value };\n\t}\n\n\tfunction getAttributeValue() {\n\t\treturn quotemark.test(source[i]) ? getQuotedAttributeValue() : getUnquotedAttributeValue();\n\t}\n\n\tfunction getUnquotedAttributeValue() {\n\t\tlet value = '';\n\t\tdo {\n\t\t\tconst char = source[i];\n\t\t\tif (char === ' ' || char === '>' || char === '/') {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tvalue += char;\n\t\t\ti += 1;\n\t\t} while (i < source.length);\n\n\t\treturn value;\n\t}\n\n\tfunction getQuotedAttributeValue() {\n\t\tconst quotemark = source[i++];\n\n\t\tlet value = '';\n\t\tlet escaped = false;\n\n\t\twhile (i < source.length) {\n\t\t\tconst char = source[i++];\n\t\t\tif (char === quotemark && !escaped) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tif (char === '\\\\' && !escaped) {\n\t\t\t\tescaped = true;\n\t\t\t}\n\n\t\t\tvalue += escaped ? `\\\\${char}` : char;\n\t\t\tescaped = false;\n\t\t}\n\t}\n\n\tfunction allowSpaces() {\n\t\twhile (i < source.length && whitespace.test(source[i])) i += 1;\n\t}\n\n\tlet i = metadata.length;\n\twhile (i < source.length) {\n\t\tif (!state) error('Unexpected character');\n\t\tstate = state();\n\t\ti += 1;\n\t}\n\n\tif (state !== neutral) {\n\t\terror('Unexpected end of input');\n\t}\n\n\tif (root.tagName === 'svg') root.metadata = header;\n\treturn {\n\t\ttype: 'root',\n\t\tchildren: [root]\n\t};\n}\n","function getLocator(source, options) {\n    if (options === void 0) { options = {}; }\n    var offsetLine = options.offsetLine || 0;\n    var offsetColumn = options.offsetColumn || 0;\n    var originalLines = source.split('\\n');\n    var start = 0;\n    var lineRanges = originalLines.map(function (line, i) {\n        var end = start + line.length + 1;\n        var range = { start: start, end: end, line: i };\n        start = end;\n        return range;\n    });\n    var i = 0;\n    function rangeContains(range, index) {\n        return range.start <= index && index < range.end;\n    }\n    function getLocation(range, index) {\n        return { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };\n    }\n    function locate(search, startIndex) {\n        if (typeof search === 'string') {\n            search = source.indexOf(search, startIndex || 0);\n        }\n        var range = lineRanges[i];\n        var d = search >= range.end ? 1 : -1;\n        while (range) {\n            if (rangeContains(range, search))\n                return getLocation(range, search);\n            i += d;\n            range = lineRanges[i];\n        }\n    }\n    ;\n    return locate;\n}\nfunction locate(source, search, options) {\n    if (typeof options === 'number') {\n        throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');\n    }\n    return getLocator(source, options)(search, options && options.startIndex);\n}\n\nexport { getLocator, locate };","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/**\r\n * @module color-parse\r\n */\r\n\r\n'use strict'\r\n\r\nvar names = require('color-name')\r\n\r\nmodule.exports = parse\r\n\r\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\r\n//FIXME: use external hue detector\r\nvar baseHues = {\r\n\tred: 0,\r\n\torange: 60,\r\n\tyellow: 120,\r\n\tgreen: 180,\r\n\tblue: 240,\r\n\tpurple: 300\r\n}\r\n\r\n/**\r\n * Parse color from the string passed\r\n *\r\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n */\r\nfunction parse (cstr) {\r\n\tvar m, parts = [], alpha = 1, space\r\n\r\n\tif (typeof cstr === 'string') {\r\n\t\t//keyword\r\n\t\tif (names[cstr]) {\r\n\t\t\tparts = names[cstr].slice()\r\n\t\t\tspace = 'rgb'\r\n\t\t}\r\n\r\n\t\t//reserved words\r\n\t\telse if (cstr === 'transparent') {\r\n\t\t\talpha = 0\r\n\t\t\tspace = 'rgb'\r\n\t\t\tparts = [0,0,0]\r\n\t\t}\r\n\r\n\t\t//hex\r\n\t\telse if (/^#[A-Fa-f0-9]+$/.test(cstr)) {\r\n\t\t\tvar base = cstr.slice(1)\r\n\t\t\tvar size = base.length\r\n\t\t\tvar isShort = size <= 4\r\n\t\t\talpha = 1\r\n\r\n\t\t\tif (isShort) {\r\n\t\t\t\tparts = [\r\n\t\t\t\t\tparseInt(base[0] + base[0], 16),\r\n\t\t\t\t\tparseInt(base[1] + base[1], 16),\r\n\t\t\t\t\tparseInt(base[2] + base[2], 16)\r\n\t\t\t\t]\r\n\t\t\t\tif (size === 4) {\r\n\t\t\t\t\talpha = parseInt(base[3] + base[3], 16) / 255\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tparts = [\r\n\t\t\t\t\tparseInt(base[0] + base[1], 16),\r\n\t\t\t\t\tparseInt(base[2] + base[3], 16),\r\n\t\t\t\t\tparseInt(base[4] + base[5], 16)\r\n\t\t\t\t]\r\n\t\t\t\tif (size === 8) {\r\n\t\t\t\t\talpha = parseInt(base[6] + base[7], 16) / 255\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!parts[0]) parts[0] = 0\r\n\t\t\tif (!parts[1]) parts[1] = 0\r\n\t\t\tif (!parts[2]) parts[2] = 0\r\n\r\n\t\t\tspace = 'rgb'\r\n\t\t}\r\n\r\n\t\t//color space\r\n\t\telse if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\r\n\t\t\tvar name = m[1]\r\n\t\t\tvar isRGB = name === 'rgb'\r\n\t\t\tvar base = name.replace(/a$/, '')\r\n\t\t\tspace = base\r\n\t\t\tvar size = base === 'cmyk' ? 4 : base === 'gray' ? 1 : 3\r\n\t\t\tparts = m[2].trim()\r\n\t\t\t\t.split(/\\s*[,\\/]\\s*|\\s+/)\r\n\t\t\t\t.map(function (x, i) {\r\n\t\t\t\t\t//<percentage>\r\n\t\t\t\t\tif (/%$/.test(x)) {\r\n\t\t\t\t\t\t//alpha\r\n\t\t\t\t\t\tif (i === size)\treturn parseFloat(x) / 100\r\n\t\t\t\t\t\t//rgb\r\n\t\t\t\t\t\tif (base === 'rgb') return parseFloat(x) * 255 / 100\r\n\t\t\t\t\t\treturn parseFloat(x)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//hue\r\n\t\t\t\t\telse if (base[i] === 'h') {\r\n\t\t\t\t\t\t//<deg>\r\n\t\t\t\t\t\tif (/deg$/.test(x)) {\r\n\t\t\t\t\t\t\treturn parseFloat(x)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//<base-hue>\r\n\t\t\t\t\t\telse if (baseHues[x] !== undefined) {\r\n\t\t\t\t\t\t\treturn baseHues[x]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn parseFloat(x)\r\n\t\t\t\t})\r\n\r\n\t\t\tif (name === base) parts.push(1)\r\n\t\t\talpha = (isRGB) ? 1 : (parts[size] === undefined) ? 1 : parts[size]\r\n\t\t\tparts = parts.slice(0, size)\r\n\t\t}\r\n\r\n\t\t//named channels case\r\n\t\telse if (cstr.length > 10 && /[0-9](?:\\s|\\/)/.test(cstr)) {\r\n\t\t\tparts = cstr.match(/([0-9]+)/g).map(function (value) {\r\n\t\t\t\treturn parseFloat(value)\r\n\t\t\t})\r\n\r\n\t\t\tspace = cstr.match(/([a-z])/ig).join('').toLowerCase()\r\n\t\t}\r\n\t}\r\n\r\n\t//numeric case\r\n\telse if (!isNaN(cstr)) {\r\n\t\tspace = 'rgb'\r\n\t\tparts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff]\r\n\t}\r\n\r\n\t//array-like\r\n\telse if (Array.isArray(cstr) || cstr.length) {\r\n\t\tparts = [cstr[0], cstr[1], cstr[2]]\r\n\t\tspace = 'rgb'\r\n\t\talpha = cstr.length === 4 ? cstr[3] : 1\r\n\t}\r\n\r\n\t//object case - detects css cases of rgb and hsl\r\n\telse if (cstr instanceof Object) {\r\n\t\tif (cstr.r != null || cstr.red != null || cstr.R != null) {\r\n\t\t\tspace = 'rgb'\r\n\t\t\tparts = [\r\n\t\t\t\tcstr.r || cstr.red || cstr.R || 0,\r\n\t\t\t\tcstr.g || cstr.green || cstr.G || 0,\r\n\t\t\t\tcstr.b || cstr.blue || cstr.B || 0\r\n\t\t\t]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tspace = 'hsl'\r\n\t\t\tparts = [\r\n\t\t\t\tcstr.h || cstr.hue || cstr.H || 0,\r\n\t\t\t\tcstr.s || cstr.saturation || cstr.S || 0,\r\n\t\t\t\tcstr.l || cstr.lightness || cstr.L || cstr.b || cstr.brightness\r\n\t\t\t]\r\n\t\t}\r\n\r\n\t\talpha = cstr.a || cstr.alpha || cstr.opacity || 1\r\n\r\n\t\tif (cstr.opacity != null) alpha /= 100\r\n\t}\r\n\r\n\treturn {\r\n\t\tspace: space,\r\n\t\tvalues: parts,\r\n\t\talpha: alpha\r\n\t}\r\n}\r\n","/** @module  color-rgba */\r\n\r\n'use strict'\r\n\r\nvar parse = require('color-parse')\r\n\r\nmodule.exports = function rgba (color) {\r\n\t// template literals\r\n\tif (Array.isArray(color) && color.raw) color = String.raw.apply(null, arguments)\r\n\r\n\tvar values, i, l\r\n\r\n\t//attempt to parse non-array arguments\r\n\tvar parsed = parse(color)\r\n\r\n\tif (!parsed.space) return []\r\n\r\n\tvar min = [0,0,0], max = parsed.space[0] === 'h' ? [360,100,100] : [255,255,255]\r\n\r\n\tvalues = Array(3)\r\n\tvalues[0] = Math.min(Math.max(parsed.values[0], min[0]), max[0])\r\n\tvalues[1] = Math.min(Math.max(parsed.values[1], min[1]), max[1])\r\n\tvalues[2] = Math.min(Math.max(parsed.values[2], min[2]), max[2])\r\n\r\n\tif (parsed.space[0] === 'h') values = hsl2rgb(values)\r\n\r\n\tvalues.push(Math.min(Math.max(parsed.alpha, 0), 1))\r\n\r\n\treturn values\r\n}\r\n\r\n\r\n// excerpt from color-space/hsl\r\nfunction hsl2rgb(hsl) {\r\n\tvar h = hsl[0]/360, s = hsl[1]/100, l = hsl[2]/100, t1, t2, t3, rgb, val, i=0;\r\n\r\n\tif (s === 0) return val = l * 255, [val, val, val];\r\n\r\n\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n\tt1 = 2 * l - t2;\r\n\r\n\trgb = [0, 0, 0];\r\n\tfor (;i<3;) {\r\n\t\tt3 = h + 1 / 3 * - (i - 1);\r\n\t\tt3 < 0 ? t3++ : t3 > 1 && t3--;\r\n\t\tval = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 :\r\n\t\t2 * t3 < 1 ? t2 :\r\n\t\t3 * t3 < 2 ?  t1 + (t2 - t1) * (2 / 3 - t3) * 6 :\r\n\t\tt1;\r\n\t\trgb[i++] = val * 255;\r\n\t}\r\n\r\n\treturn rgb;\r\n}\r\n","// Copyright 2021 The Skiafy Authors\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//    https://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\n// Skia docs at:\r\n// https://source.chromium.org/chromium/chromium/src/+/main:ui/gfx/vector_icon_types.h;l=6?q=vector_icon_types&sq=&ss=chromium\r\n// TODO: Implement STROKE, CAP_SQUARE, DISABLE_AA\r\n\r\nimport { parse, ElementNode } from 'svg-parser';\r\nimport rgba from 'color-rgba';\r\n\r\ntype Svg2IconOptions = {\r\n  scaleX?: number;\r\n  scaleY?: number;\r\n  translateX?: number;\r\n  translateY?: number;\r\n  preserveFill?: boolean;\r\n};\r\n\r\nexport function svg2icon(svgString: string, options: Svg2IconOptions = {}) {\r\n  const { scaleX = 1, scaleY = 1, translateX = 0, translateY = 0, preserveFill = true } = options;\r\n\r\n  // Generate abstract syntax tree from the svg string.\r\n  const svgRoot = parse(svgString);\r\n  const svgNode = svgRoot.children[0];\r\n\r\n  if (typeof svgNode === 'string' || svgNode.type === 'text') {\r\n    throw new Error('Detected a text string within the SVG, which is not supported.');\r\n  }\r\n\r\n  // Inject generated ICON string here, piece by piece.\r\n  let output = '';\r\n\r\n  // Parse canvas width/height (prefer viewbox).\r\n  let width = 0;\r\n  let height = 0;\r\n  if (typeof svgNode.properties?.viewBox === 'string') {\r\n    width = parseInt(svgNode.properties.viewBox.split(' ')[2]) || 0;\r\n    height = parseInt(svgNode.properties.viewBox.split(' ')[3]) || 0;\r\n  } else {\r\n    width = parseInt(`${svgNode.properties?.width}`) || 0;\r\n    height = parseInt(`${svgNode.properties?.height}`) || 0;\r\n  }\r\n\r\n  // Width and height must both be positive.\r\n  if (width === 0 || height === 0) {\r\n    throw new Error('<svg> width and/or height could not be parsed');\r\n  }\r\n\r\n  // Width and height must both be same size.\r\n  if (width !== height) {\r\n    throw new Error('<svg> width and height must be equal in order to produce accurate conversion');\r\n  }\r\n\r\n  // We only need to define the CANVAS_DIMENSIONS if it is not 48.\r\n  if (width !== 48) {\r\n    output += 'CANVAS_DIMENSIONS, ' + width + ',\\n';\r\n  }\r\n\r\n  // Recurse through the svg node.\r\n  output += handleNode(svgNode, scaleX, scaleY, translateX, translateY, preserveFill);\r\n\r\n  // Truncate final comma and newline.\r\n  output = output.slice(0, -2);\r\n\r\n  // Add new line.\r\n  output += '\\n';\r\n\r\n  return output;\r\n}\r\n\r\n//\r\n// UTILS\r\n//\r\n\r\nfunction toCommand(letter: string) {\r\n  switch (letter) {\r\n    case 'M':\r\n      return 'MOVE_TO';\r\n    case 'm':\r\n      return 'R_MOVE_TO';\r\n    case 'L':\r\n      return 'LINE_TO';\r\n    case 'l':\r\n      return 'R_LINE_TO';\r\n    case 'H':\r\n      return 'H_LINE_TO';\r\n    case 'h':\r\n      return 'R_H_LINE_TO';\r\n    case 'V':\r\n      return 'V_LINE_TO';\r\n    case 'v':\r\n      return 'R_V_LINE_TO';\r\n    case 'A':\r\n      return 'ARC_TO';\r\n    case 'a':\r\n      return 'R_ARC_TO';\r\n    case 'C':\r\n      return 'CUBIC_TO';\r\n    case 'S':\r\n      return 'CUBIC_TO_SHORTHAND';\r\n    case 'c':\r\n    case 's':\r\n      return 'R_CUBIC_TO';\r\n    case 'Q':\r\n      return 'QUADRATIC_TO';\r\n    case 'T':\r\n      return 'QUADRATIC_TO_SHORTHAND';\r\n    case 'q':\r\n    case 't':\r\n      return 'R_QUADRATIC_TO';\r\n    case 'Z':\r\n    case 'z':\r\n      return 'CLOSE';\r\n  }\r\n  return '~UNKNOWN~';\r\n}\r\n\r\nfunction lengthForSvgDirective(letter: string) {\r\n  switch (letter) {\r\n    case 'C':\r\n    case 'c':\r\n    case 's':\r\n      return 6;\r\n    case 'S':\r\n    case 'Q':\r\n    case 'q':\r\n    case 't':\r\n      return 4;\r\n    case 'T':\r\n    case 'L':\r\n    case 'l':\r\n    case 'H':\r\n    case 'h':\r\n    case 'V':\r\n    case 'v':\r\n    case 'm':\r\n    case 'M':\r\n      return 2;\r\n    case 'A':\r\n    case 'a':\r\n      return 7;\r\n  }\r\n  return 999;\r\n}\r\n\r\nfunction toFloat(val: string | number | undefined) {\r\n  return val === undefined ? 0 : parseFloat(`${val}`) || 0;\r\n}\r\n\r\nfunction isFloat(val: string | number) {\r\n  return typeof val == 'number' && (val * 10) % 10 != 0;\r\n}\r\n\r\nfunction num2str(val: number) {\r\n  return isFloat(val) ? `${val}f` : `${val}`;\r\n}\r\n\r\nfunction roundToHundredths(x: number) {\r\n  return Math.floor(x * 100 + 0.5) / 100;\r\n}\r\n\r\nfunction componentToHex(c: number) {\r\n  const hex = c.toString(16);\r\n  return (hex.length == 1 ? '0' + hex : hex).toUpperCase();\r\n}\r\n\r\nfunction parsePathColorCommand(svgElement: ElementNode) {\r\n  const fill = svgElement.properties?.fill;\r\n  if (typeof fill !== 'string') {\r\n    return '';\r\n  }\r\n\r\n  const color = rgba(fill);\r\n  if (color) {\r\n    const [r, g, b, a] = color;\r\n    return `PATH_COLOR_ARGB, 0x${componentToHex((a * 255) | (1 << 8))}, 0x${componentToHex(\r\n      r\r\n    )}, 0x${componentToHex(g)}, 0x${componentToHex(b)},\\n`;\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nfunction handleNode(\r\n  svgNode: ElementNode,\r\n  scaleX = 1,\r\n  scaleY = 1,\r\n  translateX = 0,\r\n  translateY = 0,\r\n  preserveFill = true,\r\n  inheritedFillCommand = ''\r\n) {\r\n  let output = '';\r\n\r\n  svgNode.children.forEach((svgChildNode) => {\r\n    if (typeof svgChildNode === 'string' || svgChildNode.type === 'text') {\r\n      throw new Error('Detected a text string within the SVG, which is not supported.');\r\n    }\r\n\r\n    const fillCommand = preserveFill\r\n      ? parsePathColorCommand(svgChildNode) || inheritedFillCommand\r\n      : '';\r\n\r\n    switch (svgChildNode.tagName) {\r\n      // TODO: If g has fill color pass it down to children!\r\n      case 'g': {\r\n        if (svgChildNode.properties?.transform) {\r\n          // TODO: We should be able to handle translates in transforms.\r\n          throw new Error('<g> with a transform not handled');\r\n        } else {\r\n          output += handleNode(\r\n            svgChildNode,\r\n            scaleX,\r\n            scaleY,\r\n            translateX,\r\n            translateY,\r\n            preserveFill,\r\n            fillCommand\r\n          );\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      case 'path': {\r\n        // Let's ignore all elements with explicit fill=\"none\". Use\r\n        // fill=\"currentColor\" to render the element without color.\r\n        if (svgChildNode.properties?.fill === 'none') {\r\n          break;\r\n        }\r\n\r\n        const commands: { command: string; args: number[] }[] = [];\r\n\r\n        let path = typeof svgChildNode.properties?.d === 'string' ? svgChildNode.properties?.d : '';\r\n        path = path.replace(/,/g, ' ').trim();\r\n        if (path.slice(-1).toLowerCase() !== 'z') {\r\n          path += 'z';\r\n        }\r\n\r\n        while (path) {\r\n          let point = parseFloat(path);\r\n          if (point !== point) {\r\n            const letter = path[0];\r\n            path = path.substr(1);\r\n            commands.push({ command: letter, args: [] });\r\n          } else {\r\n            let currentCommand = commands[commands.length - 1];\r\n            let svgDirective = currentCommand.command;\r\n\r\n            // Repeated sets of arguments imply the command is repeated, unless the current\r\n            // command is moveto, which implies that the rest are implicitly linetos.\r\n            if (currentCommand.args.length == lengthForSvgDirective(svgDirective)) {\r\n              if (svgDirective == 'm') {\r\n                svgDirective = 'l';\r\n              } else if (svgDirective == 'M') {\r\n                svgDirective = 'L';\r\n              }\r\n\r\n              commands.push({ command: svgDirective, args: [] });\r\n              currentCommand = commands[commands.length - 1];\r\n              svgDirective = currentCommand.command;\r\n            }\r\n\r\n            let pathNeedsPruning = true;\r\n            if (\r\n              svgDirective.toLowerCase() == 'a' &&\r\n              currentCommand.args.length >= 3 &&\r\n              currentCommand.args.length <= 4\r\n            ) {\r\n              point = parseInt(path[0]);\r\n              if (point == 0 || point == 1) {\r\n                path = path.substr(1);\r\n                pathNeedsPruning = false;\r\n              } else {\r\n                throw new Error(`Unexpected arc argument: ${point}`);\r\n              }\r\n            }\r\n\r\n            // Insert implicit points for cubic and quadratic curves.\r\n            const isQuadraticOrCubic =\r\n              svgDirective.toLowerCase() == 's' || svgDirective.toLowerCase() == 't';\r\n            if (isQuadraticOrCubic && currentCommand.args.length == 0) {\r\n              if (svgDirective == 's' || svgDirective == 't') {\r\n                const lastCommand = commands[commands.length - 2];\r\n                // Make sure relative 's' directives can only match with\r\n                // previous cubic commands, and that relative 't' directives can\r\n                // only match with previous quadratic commands.\r\n                if (\r\n                  (svgDirective == 's' &&\r\n                    toCommand(lastCommand.command).indexOf('CUBIC_TO') >= 0) ||\r\n                  (svgDirective == 't' &&\r\n                    toCommand(lastCommand.command).indexOf('QUADRATIC_TO') >= 0)\r\n                ) {\r\n                  // The first control point is assumed to be the reflection of\r\n                  // the last control point on the previous command relative\r\n                  // to the current point.\r\n                  const argsLength = lastCommand.args.length;\r\n                  currentCommand.args.push(\r\n                    roundToHundredths(\r\n                      lastCommand.args[argsLength - 2] - lastCommand.args[argsLength - 4]\r\n                    )\r\n                  );\r\n                  currentCommand.args.push(\r\n                    roundToHundredths(\r\n                      lastCommand.args[argsLength - 1] - lastCommand.args[argsLength - 3]\r\n                    )\r\n                  );\r\n                } else {\r\n                  // If there is no previous command or if the previous command\r\n                  // was not an C, c, S or s for cubics, or Q, q, T, t for\r\n                  // quadratics, assume the first control point is coincident with\r\n                  // the current point.\r\n                  currentCommand.args.push(0);\r\n                  currentCommand.args.push(0);\r\n                }\r\n              }\r\n            }\r\n\r\n            // Whether to apply flipping and translating transforms to the\r\n            // argument. Only the last two arguments (out of 7) in an arc\r\n            // command are coordinates.\r\n            let transformArg = true;\r\n            // xAxis is true when the current coordinate refers to the xAxis.\r\n            let xAxis = currentCommand.args.length % 2 == 0;\r\n            if (svgDirective.toLowerCase() == 'a') {\r\n              if (currentCommand.args.length < 5) {\r\n                transformArg = false;\r\n              }\r\n              xAxis = currentCommand.args.length % 2 == 1;\r\n            } else if (svgDirective.toLowerCase() == 'v') {\r\n              xAxis = false;\r\n            }\r\n            if (transformArg) {\r\n              point *= xAxis ? scaleX : scaleY;\r\n              if (svgDirective != svgDirective.toLowerCase()) {\r\n                point += xAxis ? translateX : translateY;\r\n              }\r\n            }\r\n            point = roundToHundredths(point);\r\n            currentCommand.args.push(point);\r\n\r\n            if (pathNeedsPruning) {\r\n              let dotsSeen = 0;\r\n              for (let i = 0; i < path.length; ++i) {\r\n                if (i == 0 && path[i] == '-') continue;\r\n                if (!isNaN(parseInt(path[i]))) continue;\r\n                if (path[i] == '.' && ++dotsSeen == 1) continue;\r\n\r\n                path = path.substr(i);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          path = path.trim();\r\n        }\r\n\r\n        output += 'NEW_PATH,\\n';\r\n        output += fillCommand;\r\n\r\n        // Write the path commands to the output.\r\n        commands.forEach((command) => {\r\n          output += `${toCommand(command.command)}`;\r\n          for (let key in command.args) {\r\n            output += `, ${num2str(command.args[key])}`;\r\n          }\r\n          output += ',\\n';\r\n        });\r\n\r\n        break;\r\n      }\r\n\r\n      case 'circle': {\r\n        // Let's ignore all elements with explicit fill=\"none\". Use\r\n        // fill=\"currentColor\" to render the element without color.\r\n        if (svgChildNode.properties?.fill === 'none') {\r\n          break;\r\n        }\r\n\r\n        output += 'NEW_PATH,\\n';\r\n        output += fillCommand;\r\n\r\n        let cx = toFloat(svgChildNode.properties?.cx);\r\n        cx *= scaleX;\r\n        cx += translateX;\r\n\r\n        let cy = toFloat(svgChildNode.properties?.cy);\r\n        cy *= scaleY;\r\n        cy += translateY;\r\n\r\n        const rad = toFloat(svgChildNode.properties?.r);\r\n\r\n        output = `CIRCLE, ${num2str(cx)}, ${num2str(cy)}, ${num2str(rad)},\\n`;\r\n\r\n        break;\r\n      }\r\n\r\n      case 'rect': {\r\n        // Let's ignore all elements with explicit fill=\"none\". Use\r\n        // fill=\"currentColor\" to render the element without color.\r\n        if (svgChildNode.properties?.fill === 'none') {\r\n          break;\r\n        }\r\n\r\n        output += 'NEW_PATH,\\n';\r\n        output += fillCommand;\r\n\r\n        let x = toFloat(svgChildNode.properties?.x);\r\n        x *= scaleX;\r\n        x += translateX;\r\n\r\n        let y = toFloat(svgChildNode.properties?.y);\r\n        y *= scaleY;\r\n        y += translateY;\r\n\r\n        const width = toFloat(svgChildNode.properties?.width);\r\n        const height = toFloat(svgChildNode.properties?.width);\r\n        const rx = toFloat(svgChildNode.properties?.rx);\r\n\r\n        output = `ROUND_RECT, ${num2str(x)}, ${num2str(y)}, ${num2str(width)}, ${num2str(\r\n          height\r\n        )}, ${num2str(rx)},\\n`;\r\n\r\n        break;\r\n      }\r\n\r\n      case 'ellipse': {\r\n        // Let's ignore all elements with explicit fill=\"none\". Use\r\n        // fill=\"currentColor\" to render the element without color.\r\n        if (svgChildNode.properties?.fill === 'none') {\r\n          break;\r\n        }\r\n\r\n        output += 'NEW_PATH,\\n';\r\n        output += fillCommand;\r\n\r\n        let cx = toFloat(svgChildNode.properties?.cx);\r\n        cx *= scaleX;\r\n        cx += translateX;\r\n\r\n        let cy = toFloat(svgChildNode.properties?.cy);\r\n        cy *= scaleY;\r\n        cy += translateY;\r\n\r\n        const rx = toFloat(svgChildNode.properties?.rx);\r\n        const ry = toFloat(svgChildNode.properties?.ry);\r\n\r\n        output = `OVAL, ${num2str(cx)}, ${num2str(cy)}, ${num2str(rx)}, ${num2str(ry)},\\n`;\r\n\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        throw new Error(`Unsupported svg element: <${svgChildNode.tagName}>`);\r\n      }\r\n    }\r\n  });\r\n\r\n  return output;\r\n}\r\n","import { icon2svg, svg2icon } from '..';\n\nwindow.onload = () => {\n  'use strict';\n\n  const input = document.getElementById('input') as HTMLTextAreaElement;\n  const output = document.getElementById('output') as HTMLTextAreaElement;\n  const preview = document.getElementById('preview') as HTMLDivElement;\n  const select = document.getElementById('mode-select') as HTMLSelectElement;\n\n  select.addEventListener('change', () => {\n    input.value = '';\n    output.value = '';\n    preview.innerHTML = '';\n  });\n\n  input.addEventListener('input', () => {\n    const isIcon2Svg = select.value === 'icon2svg';\n    const svgPreviewString = isIcon2Svg ? output.value : input.value;\n    const outputString = isIcon2Svg ? icon2svg(input.value) : svg2icon(input.value);\n\n    // Update output textarea.\n    output.value = outputString;\n\n    // Update preview.\n    const previewImage = document.createElement('img');\n    previewImage.setAttribute('src', `data:image/svg+xml;utf8,${svgPreviewString}`);\n    preview.innerHTML = '';\n    preview.appendChild(previewImage);\n  });\n};\n"],"names":["$5165075cc00623be$var$notimplemented","msg","console","log","$5165075cc00623be$var$VectorIcon","constructor","commands","delegate","this","commands_","delegate_","svg_","paths_","currentPath_","pathD_","clipRect_","paint","ncmds","length","document","createElementNS","setAttribute","classList","add","createPath","i","processCommand","join","clipPath","appendChild","rect","forEach","path","svg","closeCurrentPath","push","createCircle","params","cx","parseFloat","cy","r","cmd","createRoundRect","x","y","width","height","rx","color","map","parseInt","style","drawCommands","MOVE_TO","R_MOVE_TO","ARC_TO","R_ARC_TO","LINE_TO","R_LINE_TO","H_LINE_TO","R_H_LINE_TO","V_LINE_TO","R_V_LINE_TO","CUBIC_TO","R_CUBIC_TO","CUBIC_TO_SHORTHAND","CLOSE","nc","concat","splice","trim","$5165075cc00623be$export$264730f72dd83c76","input","split","filter","line","startsWith","XMLSerializer","serializeToString","const","$da60e9d149a8c5c0$var$validNameCharacters","$da60e9d149a8c5c0$var$whitespace","$da60e9d149a8c5c0$var$quotemark","$da60e9d149a8c5c0$export$98e6a39c04603d36","source","let","header","stack","state","metadata","currentElement","root","error","message","ref","search","options","Error","offsetLine","offsetColumn","originalLines","start","lineRanges","end","range","rangeContains","index","getLocation","column","character","startIndex","indexOf","d","$da60e9d149a8c5c0$var$getLocator","$da60e9d149a8c5c0$var$locate","before","slice","beforeLine","exec","replace","after","snippet","str","result","$da60e9d149a8c5c0$var$repeat","test","neutral","text","children","type","value","tag","char","comment","cdata","closingTag","attribute","element","tagName","getName","properties","getAttribute","name","selfClosing","allowSpaces","pop","quotemark","escaped","getQuotedAttributeValue","getUnquotedAttributeValue","isNaN","$e81b4034aa9db203$exports","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","$5481cadd51b98557$exports","cstr","space","alpha","parts","size","base","m","undefined","$5481cadd51b98557$var$baseHues","isRGB","match","toLowerCase","Array","isArray","Object","R","g","G","b","B","h","hue","H","s","saturation","S","l","lightness","L","brightness","$6f2ac7eebd53949d$var$hsl2rgb","hsl","t1","t2","t3","rgb","val","$b26dedcec238fa3b$export$3bfb18815d13a967","svgString","scaleX","scaleY","translateX","translateY","preserveFill","svgNode","output","viewBox","$b26dedcec238fa3b$var$handleNode","$b26dedcec238fa3b$var$toCommand","letter","$b26dedcec238fa3b$var$lengthForSvgDirective","$b26dedcec238fa3b$var$toFloat","$b26dedcec238fa3b$var$num2str","$b26dedcec238fa3b$var$isFloat","$b26dedcec238fa3b$var$roundToHundredths","Math","floor","$b26dedcec238fa3b$var$componentToHex","c","hex","toString","toUpperCase","inheritedFillCommand","svgChildNode","fillCommand","svgElement","fill","$parcel$interopDefault","$6f2ac7eebd53949d$exports","a","$b26dedcec238fa3b$var$parsePathColorCommand","transform","point","substr","command","args","currentCommand","svgDirective","pathNeedsPruning","lastCommand","argsLength","transformArg","xAxis","dotsSeen","key","rad","cx1","cy1","rx1","ry","values","raw","String","apply","arguments","parsed","min","max","window","onload","getElementById","preview","select","addEventListener","innerHTML","isIcon2Svg","svgPreviewString","outputString","previewImage","createElement"],"version":3,"file":"index.6c6ea60d.js.map"}